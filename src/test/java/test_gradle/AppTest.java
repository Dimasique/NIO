/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test_gradle;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import test_gradle.factories.CallbackFactory;
import test_gradle.factories.DecoderFactory;
import test_gradle.implementations.clients.Client;
import test_gradle.implementations.Coder;
import test_gradle.implementations.Server;
import test_gradle.implementations.callbacks.MyCallbackClient;
import test_gradle.implementations.factories.MyCallbackFactory;
import test_gradle.implementations.factories.MyDecoderFactory;
import test_gradle.interfaces.CallbackClient;
import test_gradle.interfaces.CallbackServer;
import test_gradle.interfaces.IClient;
import test_gradle.interfaces.IDecoder;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;


public class AppTest {

    private static final String IP = "localhost";
    private static final int PORT = 9999;
    private static Server<String> server;
    private static Client<String> client;
    private static MyCallbackClient<String> callbackClient;

    private static List<IClient<String>> clients;
    private static BlockingQueue<String> messages;


    private static final Logger log = LogManager.getLogger(AppTest.class);

    @Before
    public void initialisation() throws Exception{
        System.setProperty("log4j.configurationFile","log4j2.properties");

        clients = new ArrayList<>();
        messages = new ArrayBlockingQueue<>(3);
        DecoderFactory<String> decoderFactory = new MyDecoderFactory();
        CallbackFactory<String> callbackFactory = new MyCallbackFactory<>(clients, messages);

        callbackClient = new MyCallbackClient<>();
        client = new Client<>(new Coder(), callbackClient);

        server = new Server<>(IP, PORT, decoderFactory, callbackFactory);
    }

    @After
    public void terminate() throws Exception{
        server.close();
        client.close();
    }


    @Test
    public void testSendingFromServer() throws Exception {

        server.start();

        client.connect(IP, PORT);
        client.start();

        Thread.sleep(75);
        String message = "Welcome!";
        clients.get(0).send(message);

        String messageReceived = callbackClient.poll();

        assertEquals(message, messageReceived);
    }


    @Test
    public void testSendingFromClient() throws Exception {
        server.start();

        client.connect(IP, PORT);
        client.start();

        String message = "Welcome!";
        client.send(message);

        String messageReceived = messages.poll(3, TimeUnit.SECONDS);

        assertEquals(message, messageReceived);
    }
}
